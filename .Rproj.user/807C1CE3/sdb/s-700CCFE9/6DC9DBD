{
    "contents" : "# PARA 2000-2009\nreadVMSvesselBefore <- function(directorio, year, caletas, ... ){#caletas\n  for(i in unique(year)){\n    \n    archivos       <- NULL\n    datYear        <- NULL\n    totalFantasmas <- NULL\n    totalEmisiones <- NULL\n    distanciaTotal <- NULL\n    dat            <- NULL\n    \n    # LUEGO CAMBIAR EL DIRECTORIO\n    setwd(file.path(directorio, i)) ##direciona a la carpeta anho\n    #\n    archivos <- dir()\n    if(length(archivos)>1){\n      for(j in 1:length(archivos)){   \n        dat <- read.csv(archivos[j], stringsAsFactors = F,encoding = \"utf-8\") ##lee cada archivo dbf   \n        #dat <- dat[dat$X < 0,] # ahÃ­ algunos viajes de atun\n        datYear <- rbind(datYear,dat)\n      }  \n    } else {\n      datYear <- read.csv(archivos)\n    }\n    \n    datYear = datYear[,-which(colnames(datYear) == \"X.1\")]      \n    emb = lapply(strsplit(as.character(datYear$EMBARCACIO), split = \"/\"), function(xvect) return(xvect[1]))## extrae el ex-nombre del vector EMBARCACIO\n    datYear$EMBARCACIO2 = unlist(emb) \n\n    ghostVessel = tapply(datYear$EMBARCACIO2, datYear$NUMERO_EMB, unique)\n    namesGhost = names(ghostVessel[ghostVessel > 1])\n    \n    datYear = dataYear[!datYear$NUMERO_EMB %in% namesGhost,]\n    \n    for(barco in sort(embarcaciones)){\n      datBarco           <- datYear[datYear$EMBARCACIO2 == barco,]\n      datBarco$DATACION2 <- modTime(datBarco$DATACION) \n      datBarco           <- datBarco[order(datBarco$DATACION2),]\n      \n      barcoBueno <- dim(datBarco)[1]      \n      if(barcoBueno > 10){\n        row.repite = sameRow(datBarco$DATACION2) #QUITAMOS LAS EMISIONES REPETIDAS\n        if(length(row.repite) != 0){\n          datBarco = datBarco[-row.repite,]\n        }\n        \n        distancia0 <- matrix(0,nrow = 1, ncol = nrow(caletas)*2)        \n        distancia0[,seq(1,nrow(caletas)*2,by=2)] <- matrix(as.numeric(t(as.matrix(caletas[,2]))),nrow = 1)\n        distancia0[,seq(2,nrow(caletas)*2,by=2)] <- matrix(as.numeric(t(as.matrix(caletas[,3]))),nrow = 1)\n        distancia0 <- as.vector(distancia0)\n        distancia      <- rep(distancia0,rep(length(datBarco[,1]),length(distancia0)))\n        dim(distancia) <- c(length(datBarco[,1]),dim(caletas)[1]*2)\n        \n        distanciaTotal <- NULL\n        for(lonp in seq(1,nrow(caletas)*2,by=2)){\n          distanciaPuerto <-  distORTODROMICA(datBarco$X,datBarco$Y,distancia[,lonp],distancia[,lonp+1])  \n          distanciaTotal  <- cbind(distanciaTotal,distanciaPuerto)        \n        } \n        distanciaTotal            <- data.frame(distanciaTotal)\n        datBarco$puerto           <- apply(distanciaTotal,1,which.min)\n        datBarco$distanciaPuerto  <- apply(distanciaTotal,1,min) ## distancia al puerto de origen    \n        datBarco$horaEmision      <- c(NA, (julian(datBarco$DATACION2[1:(length(datBarco[,1])-1)])-julian(datBarco$DATACION2[2:(length(datBarco[,1]))]))*24*(-1))\n        datBarco$distanciaEmision <- c(NA, distORTODROMICA(datBarco$X[1:(length(datBarco[,1])-1)],datBarco$Y[1:(length(datBarco[,1])-1)],datBarco$X[2:length(datBarco[,1])],datBarco$Y[2:length(datBarco[,1])]))\n        datBarco$velocidadEmision <- datBarco$distanciaEmision/datBarco$horaEmision\n        datBarco$change.speed.1   <- c(NA, diff(datBarco$velocidadEmision))\n        datBarco$change.speed.2   <- c(diff(datBarco$velocidadEmision), NA)\n        datBarco$diferenciaRUMBO  <- calcularRumbo(datBarco$X,datBarco$Y)#$vectorRUMBO\n        datBarco$cambioRUMBO      <- apply(matrix(datBarco$diferenciaRUMBO),1,modificarRumbo)  \n        datBarco$compVelocidad    <- datBarco$VELOCIDAD-round(datBarco$velocidadEmision,1)\n        datBarco$angle            <- c(NA, estimateAngle(datBarco$X, datBarco$Y), NA)\n        datBarco$cambio.angle.1   <- c(NA, rev(diff(rev(datBarco$angle))))\n        datBarco$cambio.angle.2   <- c(rev(diff(rev(datBarco$angle))), NA)\n        \n        carpeta <- paste(\"dat\",substring(datBarco$DATACION[1], 7, 10), sep = \"\")\n        write.csv(datBarco, file = file.path(directorio,carpeta,paste(barco,\".csv\", sep = \"\"))) \n      }\n    }        \n  }  \n  return(invisible(NULL))\n}\n",
    "created" : 1458068208574.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4056963295",
    "id" : "6DC9DBD",
    "lastKnownWriteTime" : 1458076839,
    "path" : "F:/github/SISESATools/SISESATools/R/sisesat-auxiliar-before-2010.R",
    "project_path" : "R/sisesat-auxiliar-before-2010.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}